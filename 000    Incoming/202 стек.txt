АТД «Стек»

Определение. Стек – абстрактный тип данных (или структура данных), представляющий из себя список элементов, организованный по принципу LIFO = Last In First Out, «последним пришел, первым вышел».

Операции:
1. Вставка (Push), - указывается новый элемент, указывающий на элемент бывший до этого головой. Новый элемент теперь становится головным;
2. Извлечение (Pop) – извлечение элемента, добавленного последним, а головным становится тот, на кого указывал извлеченный;
3. Заглядываение (Peek) - чтение последнего элемента.

Стек можно реализовать с помощью массива или с помощью двусвязного списка.
Реализация с помощью массива.

img\202-01.png

Храним указатель на массив и текущее количество элементов в стеке.
Можно использовать динамический массив.


// Стек целых чисел, реализованный с помощью массива.
class CStack {
public:
CStack( int _bufferSize );
~CStack();
// Добавление и извлечение элемента из стека.
void Push( int a );
int Pop();
// Проверка на пустоту.
bool IsEmpty() const { return top == -1; }
private:
int* buffer;
int bufferSize;
int top; // Индекс верхнего элемента.
};

CStack::CStack( int _bufferSize ) :
bufferSize( _bufferSize ),
top( -1 )
{
buffer = new int[bufferSize]; // Создаем буфер.
}
CStack::~CStack()
{
delete[] buffer; // Удаляем буфер.
}
// Добавление элемента.
void CStack::Push( int a )
{
assert( top + 1 < bufferSize );
buffer[++top] = a;
}
// Извлечение элемента.
int CStack::Pop()
{
assert( top != -1 );
return buffer[top--];
}

Реализация стека на основе двусвязного списка (LinkedList<T>).
public class Stack<T> 
{     
LinkedList<T> _items = new LinkedList<T>();  
public void Push(T value)     
{ … }
public T Pop()     
{ … }  
public T Peek()     
{ … }  
public int Count     
{   get;  } 
} 

