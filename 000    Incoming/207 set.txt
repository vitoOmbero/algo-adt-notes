Unordered Set

Pair

size()
add(x) - add the elementx to the set if not already present add x to the set provided that there is no element y in the set suxh that x equals y. Return true if x was added to the set and false otherwise.
remove(x) - find an element y in the set such that x=y and remove y, returny or null if no such element exists.
find(x) - USet: find x in the set if it exists; find y=x, return y or null
SSet: locate x in the sorted set; find the smallest y>=x; set y or null (successor search);
(IUSet)ChainedHashTable: O(1)

Множество – структура данных которая представляет собой коллекцию элементов и является
реализацией математического множества, для которого характерны операции: объединение,
пересечение, разность, симметрическая разность.

  
  Множество — динамическая структура данных в информатике, является реализацией 
математического объекта множество. 
  Множество позволяет хранить не ограниченное число значений определённого типа 
без определённого порядка. Повторение добавление значения во множество, как 
правило, недопустимо. Для этой структуры данных в языках программирования обычно 
предусмотрены стандартные операции над множествами. 


Реализация на С#
Реализация множества осуществляется на основе класса Set, который реализует интерфейс
IEnumerable и закрывается универсальным аргументом который должен быть типа
IСomparable.
Элементы множества могут быть реализованы на основе списка (класс List) или двоичного
дерева поиска.
Алгоритм поиска в списке имеет степень роста сложности О(n) в то время как в дереве он
имеет в среднем степень О( log n).
public class Set<T> : IEnumerable<T> where T: IComparable<T>
{
…
}

Метод Add()
При реализации множества изначально должно быть оговорено, допустимо ли в нем наличие
повторяющихся элементов и в каких случаях. Если рассматривать множество на примере группы
студентов, то не логично добавлять одного студента в группу дважды. В таком случае алгоритм
должен выдать исключение.
public void Add(T item)
{
if (Contains(item))
{
throw new InvalidOperationException("Такое значение уже содержится в множестве ");
}
_items.Add(item);
}


Метод AddRange()
NDVTIInformation Technology Video Developer Network                                                       http://itvdn.com
Добавление множества элементов
Алгоритм добавление колллекции элементов в множество основывается на методе Add(). Если в
множестве уже существует элемент из добавляемой коллекции, то выполнение алгоритма будет
приостановлено и выдано исключение.
public void AddRange(IEnumerable <T> items) 
{ 
foreach (T item in items) 
{ 
Add(item); 
} 
}


Метод Remove()
Алгоритм удаления элемента из множества основан на методе Remove() класса List. Если
удаляемый элемент содержится в множестве, то после удаления метод возвращает true, если
элемент отсутствует в множестве – возвращается false.
public bool Remove(T item)
{
return _items.Remove(item);
}

Метод Union()
Объединение множеств – множество, содержащее в себе все элементы исходных множеств. После
объединения двух множества результатом является третье множество, которое содержит в себе все
их элементы .
[1, 2, 3, 4] union [3, 4, 5, 6] = [1, 2, 3, 4, 5, 6]

Объединение множеств (сумма или соединение) в теории множеств – множество, 
содержащее в себе все элементы исходных множеств. Объединение двух множеств А и 
В обычно обозначается А U В. 

Метод Intersection()
Пересечением двух множеств является множество, которому принадлежат те и только те
элементы, которые одновременно принадлежат всем данным множествам.
[1, 2, 3, 4] intersection [3, 4, 5, 6] = [3, 4]

 Пересечение множеств — это множество, которому принадлежат те и только 
те элементы, которые одновременно принадлежат всем данным множествам. 

Метод Difference()
Разностью двух множеств является множество, в которое входят все элементы первого множества,
что не входят во второе множество.
[1, 2, 3, 4] difference [3, 4, 5, 6] = [1, 2]
A/B

 Разность двух множеств — это теоретико-множественная операция, результатом 
которой является множество, в которое входят все элементы первого множества, 
которые не входят во второе множество. Обычно разность множеств А и В 
обозначается как А\В, но иногда можно встретить обозначение А-В или А~В. 


Метод SymmetricDifference() 
Симметрическая разность двух множеств – операция, которая выполняется над двумя
множествами, результатом которой является третье множество, которое включает в себя элементы
не принадлежащие двум первым.
[1, 2, 3, 4] SymmetricDifference [3, 4, 5, 6] = [1, 2, 5, 6]
A∆B

 Симметрическая разность двух множеств — операция над двумя множествами, 
результатом которой является новое множество, включающее все элементы исходных 
множеств, не принадлежащие одновременно обоим исходным множествам. Другими 
словами, если есть два множества А и В, то их симметрическая разность есть 
объединение элементов множества А, которые не входят в множество В, с элементами 
множества В, которые не входят в множество А. Для обозначения симметрической 
разности множеств А и В используется обозначение А ∆ В.  

Подмножество
Определение
Множество А называется подмножеством множества В, если любой элемент принадлежащий А, так
же принадлежит и множеству B.
[1, 2, 3] is subset [0, 1, 2, 3, 4, 5] = true 


