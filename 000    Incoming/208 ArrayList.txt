  Динамическим называется  такой  массив,  размер  которого  может  меняться  во  время исполнения программы. Динамический массив реализуется на основе фиксированного массива, размер которого изменяется с помощью специального метода. Бефур помнит текущее количество добавленных элементов (Size() за O(1)).
 Динамические массивы  дают  возможность  более  гибкой  работы  с  данными,  регулируют  размер массива в соответствии с необходимыми объёмами.  
  Класс  ArrayList  предназначен  для  поддержки  динамических  массивов,  которые  при необходимости  могут увеличиваться  или  сокращаться.  В  С#  стандартные  массивы имеют  фиксированную  длину,  которая  не  может  изменятся  во  время  выполнения программы. Объект класса  ArrayList представляет собой массив переменной длинны, элементами  которого  являются  объектные  ссылки.  Любой  объект  класса  ArrayList создается  с  некоторым  начальным  размером.  При  превышении  этого  размера коллекция автоматически его увеличивает. В случае удаления объектов массив можно сократить.  
  Класс ArrayList реализует интерфейс ICollection, IList, IEnumerable, IClonable. 
  public ArrayList(); - создание  пустого  ArrayList-массива  с начальной емкостью равной 16-ти элементам;
  public ArrayList(ICollection c); - инициализируется элементами и емкостью коллекции, заданной параметром;
  public ArrayList(int capacity); - с заданной начальной емкостью.
  При  добавлении  элементов  в  ArrayList-массив  его  емкость  автоматически 
увеличивается,  при  чем  каждый  раз,  когда  список  должен  расширятся,  его  емкость удваивается.  
  Помимо  методов,  определенных  в  интерфейсах  в  классе  ArrayList  реализованы собственные методы: 
  Sort() – метод для сортировки коллекции. 
  BinarySearch()  –  метод  для  поиска  значения  в  коллекции,  возвращает  индекс 
найденного  элемента.  Он  значительно  быстрее  работает,  чем  линейный  поиск, реализуемый  через  метод  indexOf(),  но  работает  только  с  отсортированными массивами.  Степень  роста  сложности  алгоритма  при  бинарном  поиске  имеет степень  роста  O(log n),  при  линейном  поиске  O(n).  Чтобы  найти  объект  в массиве, BinarySearch сравнивает  его  с  элементом,  расположенным  в  середине массива. Если искомый объект оказывается меньше, значит он находится в первой 
половине  массива,  и  во  второй  половине  можно  его  не  искать.  А  если  искомый объект больше, то он располагается во второй половине массива. Далее процесс повторяется  для  той  половины  массива,  в  которой  находится  объект.  Если 
передать  методу BinarySearch неотсортированный  массив,  то  он  все  равно выполнит все положенные шаги и, скорее всего, сообщит, что элемент не найден, даже если он присутствует в массиве (возможно, элемент и будет найден, но это, 
естественно,  будет  случайность).  Этот  метод  не  проверяет  порядок  элементов, предполагая, что они отсортированы. 
  Reverse() – изменяет порядок элементов во всем списке ArrayList на обратный. 

Класс ArrayList реализует интерфейс IList<T>, который представляет собой коллекцию объектов,
доступ к которым может быть получен отдельно по индексу. По индексу можно вставлять и
удалять элементы из массива.
Интерфейс IList<T> наследуется от интерфейса ICollection<T>, в котором реализованы методы
для управления коллекциями: определение числа элементов коллекции, синхронизация,
нумератор.
Динамический массив созданный с использованием класса ArrayList имеет следующие
особенности:
 массив T [] _items содержит элементы коллекции;
 конструктор по умолчанию инициализирует массив размерностью в ноль элементов;
 когда конструктор принимает целочисленное значение, то инициализирует им размер
массива.

Добавление нового элемента  
Алгоритм добавления нового элемента в динамический массив отличается от тех которые
используются для статических массивов и списков. Основные отличия :
 Возможность добавления нового элемента в середину коллекции. В то время как связанный список поддерживает добавления элементов, только в начало и в конец.
 Степень роста сложности алгоритма при добавления элемента в связанный список составляет О(1), а при добавлении в динамический массив может составлять О(1) или О(n).
В случае переполнения внутреннего массива коллекции:
 Размер массива увеличивается.
 Копируются элементы из меньшего массива в больший.
 Обновляется размер внутреннего массива.

Метод Add() PushBack
Метод Add() добавляет элемент в конец массива.


operator[], GetAt
Доступ к элементу массива по индексу за O(1)
Как долго работает функция Add добавления
элемента?
 В лучшем случае = O(1)
 В худшем случае = O(n)
 В среднем?
Имеет смысл рассматривать несколько операций добавления и оценить среднее время в контексте последовательности операций.
Подобный анализ называется амортизационным.
Определение (по Кормену…). При амортизационном анализе время, требуемое для выполнения последовательности операций над
структурой данных, усредняется по всем выполняемым операциям. Этот анализ можно использовать, например, чтобы
показать, что даже если одна из операций последовательности является дорогостоящей, то при усреднении по всей последовательности средняя стоимость операций будет небольшой.
Амортизационный анализ отличается от анализа средних величин тем, что в нем не учитывается вероятность.
При амортизационном анализе гарантируется средняя производительность операций в наихудшем случае.

Определение. Пусть S(n) – время выполнения последовательности всех n операций в наихудшем случае. Амортизированной стоимостью
(временем) AC(n) называется среднее время, приходящееся на одну операцию S(n) / n.
Оценим амортизированную стоимость операций Add динамического массива.

Утверждение. Пусть в реализации функции grow() буфер удваивается. Тогда амортизированная стоимость функции Add составляет O(1).

Доказательство
Рассмотрим последовательность из n операций Add
Обозначим P(k) - время выполнения Add в случае, когда RealSize = k.

P(k) <= с1k, если k = 2^m.
P(k) <= с2, если k !=  2^m

S(n) = Sum|k=0..n-1|( P(k) ) <= c1 * Sum|m: 2^m < n|( 2^m ) + c2 * Sum|k: k!=2^m|( 1 ) <= 2*c1*n + c2*n = (2*c1 + c2)*n;
S(n) <= (2*c1 + c2)*n;
AC(n) = S(n) / n <= 2*c1 + c2 = O(1).


Метод Insert()
При вставке нового элемента по индексу, требуется сдвинуть все элементы в право, после индекса
по которому предполагается вставка нового элемента.


Удаление элемента по индексу
Метод RemoveAt()
Массив после удаления элемента:
0 1 2 3 4
"a" "b" "c" "d" "e"
56
"f"
0 1 2 3 4
"a" "b" "c" "d" "e"
56
"f"
Массив после сдвига:
Метод RemoveAt() удаляет элемент из массива по указанному индексу, после чего элементы
массива сдвигаются в лево.

Метод Remove()
Метод Remove() удаляет первый элемент из массива, который совпадет с искомым. Метод
возвращает true, если элемент найден и удален, в противном случае false. После удаления
осуществляется сдвиг элементов в лево.
public bool Remove(T item)
{
for (int i = 0; i < Count; i++)
{
if (_items[i].Equals(item))
{
RemoveAt(i);
return true;
}
}
return false;
}


Изменение элемента
Свойство Item позволяет изменять значение элемента массива по указанному индексу или получать
к нему доступ.
public T this[int index]
{
get
{
if (index < Count) { return _items[index]; }
throw new IndexOutOfRangeException();
}
set
{
if (index < Count)
{ _items[index] = value; }
else
{ throw new IndexOutOfRangeException(); }
}
}


Принадлежность элемента массиву
Метод Contains() определяет принадлежит ли указанный элемент массиву, если да, то возвращает true в
противном случае возвращает false.
public bool Contains(T item)
{
return IndexOf(item) != -1;
}
С помощью метода IndexOf(T item) выполняется линейный поиск. Данный метод определяет 
равенство с помощью вызова метода Object.Equals.
public int IndexOf(T item)
{
for (int i = 0; i < Count; i++)
{
if (_items[i].Equals(item)) { return i; }
}
return -1;
}


// Класс «Динамический массив».
class CArray {
public:
CArray() : buffer( 0 ), bufferSize( 0 ), realSize( 0 ) {}
~CArray() { delete[] buffer; }
// Размер.
int Size() const { return realSize; }
// Доступ по индексу.
double GetAt( int index ) const;
double operator[]( int index ) const { return GetAt( index ); }
double& operator[]( int index );
// Добавление нового элемента.
void Add( double element );
private:
double* buffer; // Буфер.
int bufferSize; // Размер буфера.
int realSize; // Количество элементов в массиве.
void grow();
};


// Доступ к элементу.
double CArray::GetAt( int index )
{
assert( index >= 0 && index < realSize && buffer != 0 );
return buffer[index];
}
// Увеличение буфера.
void CArray::grow()
{
int newBufferSize = std::max( bufferSize * 2, DefaultInitialSize );
double* newBuffer = new double[newBufferSize];
for( int i = 0; i < realSize; ++i )
newBuffer[i] = buffer[i];
delete[] buffer;
buffer = newBuffer;
bufferSize = newBufferSize;
}
// Добавление элемента.
void CArray::Add( double element )
{
if( realSize == bufferSize )
grow( arr );
assert( realSize < bufferSize && buffer != 0 );
buffer[realSize++] = element;
}

