#include <cassert>
#include <iostream>
#include <vector>

class Fibonacci final {
 public:
    
  // table method
  static int get(int n) {
    assert(n >= 0);
      
    std::vector<int> t = {0, 1};
    if(n > 1)
    {  
        for (int i = 2; i <= n; ++i)
        {
            t[i] = t[i-1] + t[i-2];
        }
    }
    
    return t[n];
  }
};

int main(void) {
  int n;
  std::cin >> n;
  std::cout << Fibonacci::get(n) << std::endl;
  return 0;
}


#include <cassert>
#include <iostream>

class Fibonacci final {
 public:
    
  // table method
  static int get(int n) {
    assert(n >= 0);
      
    if (n < 2)
        return n;
     
    int prev1 = 1;
    int prev2 = 0;
    int res = prev1;
    
      for (int i = 2; i <= n; ++i)
      {
          res = prev1 + prev2;
          prev2 = prev1;
          prev1 = res;
      }
    
    return res;
  }
};

int main(void) {
  int n;
  std::cin >> n;
  std::cout << Fibonacci::get(n) << std::endl;
  return 0;
}