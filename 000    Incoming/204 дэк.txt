АТД «Дэк»

Определение. Двусвязная очередь – абстрактный тип данных (структура данных), в которой элементы можно добавлять и удалять как в начало, так и в конец, то есть принципами обслуживания являются одновременно FIFO и LIFO.
Операции:
1. Вставка в конец (PushBack),
2. Вставка в начало (PushFront),
3. Извлечение из конца (PopBack),
4. Извлечение из начала (PopFront).

PeekFront – указатель на начало очереди.
PeekLast – указатель на конец очереди.

• EnqueueFirst() – метод добавляет элемент в начало очереди;
• EnqueueLast() – метод добавляет элемент в конец очереди (конец списка);
• DequeueFirst() – метод удаляет элемент с начала очереди (начала списка);
• DequeueLast() – метод удаляет элемент с конца очереди (конца списка);
• PeekFirst() – метод возвращает первый элемент очереди(начало списка);
• PeekLast() – метод возвращает последний элемент очереди(конец списка);


Дек, также как стек или очередь, можно реализовать с помощью массива или с помощью списка.

Реализация очереди в виде массива, является более сложной задачей, однако единожды реализовав двусвязную очередь, ее можно в дальнейшем использовать для построения других структур данных, что снижает время разработки.
Указатель head в массиве указывает на начало очереди , а указатель tail на ее конец.

head		     tail
  |		      |
[ 1 ][ 2 ][ 3 ][ 4 ][ 5 ]

При добавлении нового элемента в конец при пустом массиве, указатели tail и head указывают на
его первую ячейку.
public void EnqueueLast(T item)
{
if (_tail == _items.Length - 1)
{ _tail = 0; }
else
{ _tail++; }
……
}

head  tail
  |    |
[ 1 ][ 2 ][ _ ][ _ ][ _ ]


EnqueueLast(3):

head       tail
  |  	    |
[ 1 ][ 2 ][ 3 ][ _ ][ _ ]


EnqueueFirst(4):

           tail head
     	    |    |
[ 1 ][ 2 ][ 3 ][ 4 ][ _ ]


Реализация через список:

addFirst(x) -> add(0, x)
removeFirst() -> remove(0)
addLast(x) -> add(size(), x)
removeLast() -> remove(size() - 1)