Жадные алгоритмы
Жадный алгоритм (англ. Greedy algorithm) – алгоритм, 
заключающийся в принятии локально оптимальных
решений на каждом этапе, допуская, что конечное
решение также окажется оптимальным.
Доказательство оптимальности часто следует такой схеме:
1. Доказывается, что жадный выбор на первом шаге не
закрывает пути к оптимальному решению: для всякого
решения есть другое, согласованное с жадным выбором
и не хуже первого.
2. Показывается, что подзадача, возникающая после
жадного выбора на первом шаге, аналогична исходной.
3. Рассуждение завершается по индукции.


Монетная система некоторого государства состоит из монет
достоинством a￿1 = 1 < a￿2 < ⋯ < ￿aN
 . Требуется выдать сумму S наименьшим
возможным количеством монет.
Жадный алгоритм:
Берём наибольшее возможное количество
монет наибольшего достоинства ￿
...
Далее аналогично получаем, сколько нужно монет
меньшего номинала для выдачи остатка.
• Не всегда даёт оптимальное решение.
Например. Монеты в 1, 5 и 7коп. Сумма 24.
Жадный алгоритм разменивает так:
7к. — 3 шт., 1к. — 3 шт.
Правильное решение:
7к. — 2 шт., 5к. — 2 шт.
• Тем не менее, на всех реальных монетных системах жадный алгоритм даёт
правильный ответ.

Покрытие
отрезками.

Задача. Дано множество отрезков ￿
Задача. Дано множество отрезков [a, bil, покрывающее отрезок [0, X].
Найти наименьшее подпокрытие, т.е. минимальный набор отрезков,
по-прежнему покрывающий отрезок (0, X].
Жадное решение.
Упорядочим набор отрезков по возрастанию левого конца а.
Шаг 1. Среди отрезков, содержащих О, найдем такой, у которого
наибольший правый конец br. Обозначим этот отрезок [a, b).
Шаг 2. Среди отрезков, содержащих ba, найдем такой, у которого
наибольший правый конец br. Обозначим этот отрезок [a,b].
И так далее.
...

Утверждение. Жадное решение является оптимальным.
Доказательство. От противного. Пусть жадное решение состоит из К
отрезков [а, Б.]. И пусть существует более оптимальное решение
[a, bi], состоящие из менее чем К отрезков.
Упорядочим отрезки в решениях по правому краю. Заметим, что
отрезки также будут упорядочены и по левому краю в оптимальном
решении и в жадном решении.
Найдем первый отрезок, отличающийся в жадном решении от
оптимального. У такого отрезка оптимального решения меньше
правый край и он по-прежнему покрывает правый край предыдущего
общего отрезка. Значит, его можно заменить на отрезок из жадного
решения.
Так, заменяя отрезки оптимального решения на отрезки жадного,
получим, что менее К первых отрезков жадного решения являются
оптимальным решением, что невозможно по построению жадного
решения.


Задача о рюкзаке (англ. Knapsack problem) — одна из NP-полных
задач комбинаторной оптимизации. Название своё получила от
максимизационной задачи укладки как можно большего числа нужных
вещей в рюкзак при условии, что общий объём (или вес) всех
предметов, способных поместиться в рюкзак, ограничен.
Имеется N грузов. Для каждого і-го груза определён вес w; и ценность
Са. Нужно упаковать в рюкзак ограниченной грузоподъёмности G те
грузы, при которых суммарная ценность
упакованного была бы максимальной.￿

Жадный алгоритм.
Предметы сортируются по убыванию стоимости единицы
каждого (по отношению цены к весу).
Шаг 1. Помещаем в рюкзак первый предмет из
отсортированного массива, который поместится в рюкзак.
Шаг 2. Помещаем в рюкзак первый из оставшихся
предметов отсортированного массива, который
поместится в рюкзак.
И т.д., пока в рюкзаке остается место или все оставшиеся
предметы оказались тяжелее.


Пример, когда жадный алгоритм не работает.
Пусть вместимость рюкзака 90. Предметы уже отсортированы. 
Применяем к ним жадный алгоритм.
вес цена цена/вес
1 20 60 3
2 30 90 3
3 50 100 2
Кладём в рюкзак первый, а за ним второй предметы. Третий предмет в
рюкзак не влезет. Суммарная ценность поместившегося равна 150. 
Если бы были взяты второй и третий предметы, то суммарная
ценность составила бы 190. Видно, что жадный алгоритм не
обеспечивает оптимального решения, поэтому относится к
приближенным.


